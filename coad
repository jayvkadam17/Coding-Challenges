Here's the code for the "Double using callback" task


function doubleArray(arr, callback) {
  const doubledArr = arr.map(callback);
  return doubledArr;
}

function doubleValue(value) {
  return value * 2;
}

const numbers = [1, 2, 3, 4, 5];
const doubledNumbers = doubleArray(numbers, doubleValue);
console.log("Doubled Numbers:", doubledNumbers);

2
Here's the code for the "String Manipulation" task:

function manipulateString(string) {
  return function logString() {
    const manipulatedString = string.toUpperCase();
    console.log("The manipulated string is:", manipulatedString);
  };
}

const logStringCallback = manipulateString("Hello, World!");
logStringCallback();

function ageInDays(person) {
  const { firstName, lastName, age } = person;
  const fullName = firstName + ' ' + lastName;
  const ageInDays = age * 365;

  return function logMessage() {
    console.log(`The person's full name is ${fullName} and their age in days is ${ageInDays}.`);
  };
}

// Example usage:
const person = {
  firstName: 'John',
  lastName: 'Doe',
  age: 25
};

const logMessageCallback = ageInDays(person);
logMessageCallback();


// Task 4: Arrange in alphabetical order
function sortByTitle(books, callback) {
  const titles = books.map(book => book.title);
  const sortedTitles = titles.sort();
  callback(sortedTitles);
}

const books = [
  { title: "The Great Gatsby", author: "F. Scott Fitzgerald", year: 1925 },
  { title: "To Kill a Mockingbird", author: "Harper Lee", year: 1960 },
  { title: "1984", author: "George Orwell", year: 1949 },
  { title: "Pride and Prejudice", author: "Jane Austen", year: 1813 }
];

function logTitles(titles) {
  console.log("Task 4: Titles in alphabetical order:", titles);
}

sortByTitle(books, logTitles);

// Task 5: Greeting Promise
function createGreetingPromise(name) {
  return new Promise((resolve, reject) => {
    if (name) {
      const greeting = `Hello, ${name}!`;
      resolve(greeting);
    } else {
      reject("Invalid name");
    }
  });
}

const name = "Mithun";
createGreetingPromise(name)
  .then(message => console.log("Task 5: Greeting Promise:", message))
  .catch(error => console.error("Task 5: Greeting Promise Error:", error));

// Task 6: Fetch results asynchronously
async function fetchData() {
  try {
    const response = await fetch("https://jsonplaceholder.typicode.com/todos/1");
    const data = await response.json();
    console.log("Task 6: Fetched Data:", data);
  } catch (error) {
    console.error("Task 6: Fetch Error:", error);
  }
}

fetchData();

// Task 7: Multiple requests
async function fetchMultipleData() {
  try {
    const [todoResponse, postResponse] = await Promise.all([
      fetch("https://jsonplaceholder.typicode.com/todos/1"),
      fetch("https://jsonplaceholder.typicode.com/posts/1")
    ]);

    const todoData = await todoResponse.json();
    const postData = await postResponse.json();

    const combinedData = {
      todo: todoData,
      post: postData
    };

    console.log("Task 7: Combined Data:", combinedData);
  } catch (error) {
    console.error("Task 7: Fetch Error:", error);
  }
}

fetchMultipleData();

// Task 8: Get Data from API and Display it on the browser console
fetch("https://jsonplaceholder.typicode.com/posts")
  .then(response => response.json())
  .then(data => console.log("Task 8: Fetched Data:", data))
  .catch(error => console.error("Task 8: Fetch Error:", error));

// Task 9: Error Handling
fetch("https://jsonplaceholder.typicode.com/posts/123456789")
  .then(response => {
    if (!response.ok) {
      throw new Error("Request failed");
    }
    return response.json();
  })
  .then(data => console.log("Task 9: Fetched Data:", data))
  .catch(error => console.error("Task 9: Fetch Error:", error));
